<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Post on theyknow</title>
    <link>https://domain.example/categories/post/</link>
    <description>Recent content in Post on theyknow</description>
    <image>
      <title>Post on theyknow</title>
      <link>https://domain.example/categories/post/</link>
      <url>https://images.alphacoders.com/712/thumb-1920-712781.jpg</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 8.0.2 (Hugo 0.54.0)</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 19 Jul 2019 18:44:20 UT</lastBuildDate>
    <atom:link href="https://domain.example/categories/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>i18 Challenge - Part 2</title>
      <link>https://domain.example/post/i18-2/</link>
      <pubDate>Wed, 17 Jul 2019 08:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/i18-2/</guid>
      <description>5: Lett fluidmekanikk An executable file.
Clue one: The program also accepts the password as an argument.
Clue two: The password exists (perhaps) in a dictionary.
We get an executable file asking for a password. Enter the wrong one and it quits. I&amp;rsquo;m a complete beginner in Reverse Engineering but I have enjoyed a few tutorial videos so let&amp;rsquo;s jump right in with Immunity.
When you open the file, right click  View  module ‘crackme’.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ 5: Lett fluidmekanikk An executable file.
Clue one: The program also accepts the password as an argument.
Clue two: The password exists (perhaps) in a dictionary.
We get an executable file asking for a password. Enter the wrong one and it quits. I&amp;rsquo;m a complete beginner in Reverse Engineering but I have enjoyed a few tutorial videos so let&amp;rsquo;s jump right in with Immunity.
When you open the file, right click  View  module ‘crackme’. Then right click  Search for  All reference text strings. It will show you the lines of text that the software shows us, for example &#34;ASCII &#34;Please enter your password: “”. Double click on this one.  Now the goal is to find a way to bypass the login system. If we check the other strings we can see a password!
008B161B . C785 6CFDFFFF 78428C00 MOV DWORD PTR SS:[EBP-294],crackme.008C4; ASCII &#34;pAss0rd1337&#34;  If we try it though, the program just trolls us and shows &amp;ldquo;Good job! Incorrect password, though.&amp;rdquo; before exiting.
The important part to look for now are the JNZ: JNZ - The jump WILL take place if the Z Flag is NOT zero (1) CMP - If the two values are equal, the Z Flag is set (1) otherwise it is not set (0)  We see several JNZ, and if we check the one right after the fake password trolling, it goes to 008B172B. So this is the exit of the program. What about the correct answer though?
In this screenshot, we can see that right before the Correct line, we have a jump happening that goes to 008B171E which is the Incorrect option and then the program exit. So by simply replacing the assembly of this jump with JZ, we bypass the verification system as now it will avoid the jump if the password is NOT the right one and give us the Correct answer!
6: For the record&amp;hellip; This is just to look up.
Clue one: For example, in a distributed, hierarchical directory service.
Clue two: challenge.i18.no. CLASS1 TYPE16
The look up part gave it up kind of for me. I started directly looking for a DNS recon using nslookup: nslookup challenge.i18.no
Server:	10.11.0.1
Address:	10.11.0.1#53
Non-authoritative answer:
Name:	challenge.i18.no
Address: 185.56.186.11
 Now I checked all the possible record types: A, MX, and TXT.
In the TXT records we find the answer!
7: Not quite a 0day Another executable file. Apparently vulnerable, by the file name to judge. Hmm.
Clue one: The task can be solved in several ways.
Clue two: Some features of C can make your program vulnerable if you use them incorrectly.
Clue three: Look for square brackets and align in ascending order.
I spent a long time on this one. I thought it would be another Reverse Engineering job so started to look at the program in Immunity, but for almost 2hrs I couldn&amp;rsquo;t find anything. I checked the first two clues which confused me even more so after another half an hour of googling about C vulnerabilities, I checked the last clue. It said to look for square brackets, so I did just that in Immunity.
Found 13 lines of them and after ordering them, the letters contained in each bracket make up the line “hacktheplanet”.
echo -n hacktheplanet | sha256sum 48f6018bc6898a5c9e61d549b174131c07ed70542ba1c326289b9cc35af22f84  Probably the weirdest challenge so far, very puzzle / CTF-like.
8: På riktig bølgelengde Clue: Things are not always as they appear.
We just got this image. After doing a little bit of info recon on the file itself, not much comes up except the size of it for such a small image. So that and the clue tells me that something is up.
After a little bit of research, I find this useful article about hidden files in images. One important information is that in the HEX, a jpg has the terminating byte of ffd9. If we search for it with: cat logo.jpg | grep &#39;ffd9&#39;  We see that there is still a lot going on after the ffd9 where it should have ended. We have “4944 3303” as the following bytes, and with a quick google search we find out that it is the initial bytes of an MP3 file. Still thanks to the previous article, we know that we can use the dd command to extract it. But first we need to find the offset in an hex editor. I used Bless Hex Editor which has a nice and simple GUI. I found the offset “0x3BD8” where the MP3 file starts:
Still according to the article linked above: “dd only takes decimal values, so we convert the hexadecimal location from hex to decimal”. Which gives us the decimal 15320. Now we can run the dd command:
dd if=logo.jpg bs=1 skip=15320 of=logo.mp3  The file is created but after that I have been lost for too long. I can&amp;rsquo;t find a way to make this MP3 work so I gave up for now, and we&amp;rsquo;ll probably come back to this challenge later. If anyone spots an obvious mistake I made, please contact me!
See you for part 3!
]]></content:encoded>
    </item>
    <item>
      <title>i18 Challenge - Part 1</title>
      <link>https://domain.example/post/i18-1/</link>
      <pubDate>Wed, 10 Jul 2019 10:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/i18-1/</guid>
      <description>The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter. And same if you have questions or things you would like to know more about! Alright let&amp;rsquo;s jump in!
1: Ren rutine Task: First task and this is simple. The answer we are looking for is sha256(lett som en plett).
This one seems fairly easy: just generates the sha256 hash for the sentence ‘lett som en plett’. Just type this command: echo -n &#39;lett som en plett&#39; | sha256sum  It will give: b3df0e709c60b6c3790941a49d989dcd1911b1e25eba18afdb08f78820a1b8cf
And it works! First flag!
2: This Must Be The Place Task: We have put this on our head completely.
No more info than that. But it says the &amp;ldquo;head&amp;rdquo; so I would imagine it has something to do with the header, so let&amp;rsquo;s look at the page header! A quick way to do that is to right click, inspect element, go to to the network tab and click on the first GET request which is for this specific page. In the header, we do find a strange parameter called X-Answer with the value: b8e63fba4504b3c29e582cc3d1f6cc56918998d50e55b1af3382080506f2f969
And indeed it works! We could also have just pinged the page to get the header back: curl -I https://challenge.i18.no/level/fbmserjd3dwtvrspnk8ektmxsvdenwvp  3: I Skyggene Task: nsm:$1$asH66rpo$gkIQMSAA.QS/ah5VZvrYi0:16403:0:99999:7::: Clue one: Passwords that follow predictable patterns make them easier to crack.
Clue two: An article explaining why Summerferie2014 is a bad password.
The clues are completely essential for me here because I have very little experience in crypto challenges. I can easily guess that it will follow the pattern of Summerferie2014 though. So one word and then one number (probably a year). As it is in Norwegian, we can&amp;rsquo;t use already premade wordlists I have in English.
To find a list of words wasn&amp;rsquo;t easy but I found an old scrabble website that had one in their rules page by googling ordboka: https://www.ordspill.no/rules/ which redirects us in the end to this website with a downloadable list: http://www2.scrabbleforbundet.no/wp-content/uploads/2016/10/nsf2016.zip
I wonder if they know their innocent scrabble list can be used to crack passwords. Anyway this probably took me almost an hour but we got it! Oh yes, the actual challenge now.
We save the hash in a text file and after running a normal command with john (john hash.txt &amp;ndash;wordlist=nsf2016.txt), it doesn&amp;rsquo;t manage to crack the password. So we probably need to help it by adding a rule as we know the format of the possible password (common word &#43; number/year).
According to this article: https://www.gracefulsecurity.com/custom-rules-for-john-the-ripper/ - we should be able to create that by adding to the john&amp;rsquo;s Config file (etc/john/john.conf) this rule: [List.Rules:wordDate]
cAz&#34;201[0-9]&#34;  Basically it will try every word on the list with a first capital letter, then 201 and add 0 to 9 at the end, giving for example Stanley2012. The “c” at the beginning tells john to remove the rule of the initial capital letter if it doesn&amp;rsquo;t find anything. So after the right command: john hash.txt --wordlist=nsf2016.txt --rules=wordDate  It tells me that it cracked it with the result being “Demokrati2015”. For some reason, the CTF did not accept this answer and I couldn&amp;rsquo;t understand why. But then I remembered that the previous answers were hashed in sha256 so I did the same with Demokrati2015 and it worked. echo -n Demokrati2015 | sha256sum a4e3e09a00b0706add935ebdf627dc57bfb6e9d53b0be2c60754ad5865ce3c4f  4: Broen A file. What is hiding in this.
Clue: sha256(lc(nameofaplace))
Ok so we get a file to download. Awesome! I love to do forensic challenges. The file is called data.bin. Let&amp;rsquo;s check what it could be with a simple command: file data.bin “data.bin: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 65535)”  Great! A pcap file. I&amp;rsquo;m deep into a network security ebook so I recognise the extension directly. Basically for those that don&amp;rsquo;t know, pcap means Packet Capture Data. The file was generated through packet sniffing by the free software Wireshark. So let&amp;rsquo;s open the software and have a look at this capture. It&amp;rsquo;s a short packet capture and we see directly that there was a successful HTTP request and another request after that for an image:
If we continue down through this image request, we see that it was also successful:
Which means there is an image in this packet capture. To get the files transfered through HTTP, go to file -&amp;gt; Export Objects -&amp;gt; HTTP. Let&amp;rsquo;s have a look at this picture:
Interesting&amp;hellip; It looks like a google map picture of a bridge (Broen, the title of the challenge means bridge in Norwegian). As the clue is about finding the name of a place, I can guess already that if we find where this bridge is, we should be good to go. Let&amp;rsquo;s start by checking the website that is written as Copyright. But we don&amp;rsquo;t find anything there, just an interactive map and I&amp;rsquo;m not going to visit all the places in Norway looking for this bridge. Let&amp;rsquo;s analyze the image then.
I did not find anything interesting by checking the usual commands like identify, file, exiv2. So after some googling I found an article by Nullbyte about extracting hidden information in images through exiftool. I quickly installed it and after running it, we get an interesting information:
A GPS position! Alright now we&amp;rsquo;re getting somewhere. I go straight to a GPS coordinate website, enter the coordinates and BOOM! We know that the bridge is in Eidsvoll. Fun fact: the Norwegian constitution was drafted and signed in Eisdvoll on the 17th of May 1814 by the constitutional assembly. And this is now the Norwegian national day.
Let&amp;rsquo;s finish the challenge now:
echo -n eidsvoll | sha256sum e6b46a50991986097e4a309076cc0760be4c7a643f62e42b07adaf14a7fe30d4  Success! See you in part 2!
]]></content:encoded>
    </item>
  </channel>
</rss>
