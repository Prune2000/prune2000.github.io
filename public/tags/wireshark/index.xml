<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>wireshark on theyknow</title>
    <link>https://domain.example/tags/wireshark/</link>
    <description>Recent content in wireshark on theyknow</description>
    <image>
      <title>wireshark on theyknow</title>
      <link>https://domain.example/tags/wireshark/</link>
      <url>https://images.alphacoders.com/712/thumb-1920-712781.jpg</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.1.0 (Hugo 0.58.3)</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 27 Oct 2019 18:40:04 UT</lastBuildDate>
    <atom:link href="https://domain.example/tags/wireshark/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writeup: Timbershade - TRAFFIC ANALYSIS EXERCISE</title>
      <link>https://domain.example/post/mta-timbershade/</link>
      <pubDate>Sat, 26 Oct 2019 23:00:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/mta-timbershade/</guid>
      <description>Malware Traffic Analysis @malware_traffic blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security of any organisation.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ Malware Traffic Analysis @malware_traffic blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security of any organisation. It helps the security team to find out where the problem happened and how to mitigate it. It is also super fun!

Timbershade Today, I&amp;rsquo;ll do one of the recent exercises &amp;ldquo;2019-01-28 - TRAFFIC ANALYSIS EXERCISE - TIMBERSHADE&amp;rdquo;. This time we got two files: a pcap and a text file with Windows security alerts.
QUESTIONS:
• What is the IP address of the infected Windows host?
• What is the MAC address of the infected Windows host?
• What is the host name of the infected Windows host?
• What is the Windows user account name for the infected Windows host?
• What is the SHA256 file hash of the Windows executable file sent to the infected Windows host?
• Based on the IDS alerts, what type of infection is this?

My Answers 1) What is the IP address of the infected Windows host?
The IP of the infected Windows host is 172.17.8.109
2) What is the MAC address of the infected Windows host?
3) What is the host name of the infected Windows host?
I&amp;rsquo;ll answer both questions together because we can find the hostname and the MAC address quickly through different ways: https://unit42.paloaltonetworks.com/using-wireshark-identifying-hosts-and-users/
In this case, we filter by “bootp” &amp;gt; Go to Bootstrap Protocol and then in the options we find the hostname and MAC address:
4) What is the Windows user account name for the infected Windows host?
To find this information we can look at the Kerberos traffic. To do that, filter the traffic by “kerberos.CNameString” select one of the frame with the source being our infected Windows host, navigate the frame details sections: This will add the CNameString to all the Kerberos request so we can find one of them with the username and not the hostname. CNameString values for hostnames always end with a $ (dollar sign), while user account names do not. The username is “margaret.dunn”.
4) What is the SHA256 file hash of the Windows executable file sent to the infected Windows host?
We can find the executable file in: File &amp;gt; Export objects &amp;gt; HTTP. I downloaded the .bin file and in my terminal, I checked its sha256: root@kali:~# sha256sum actiV.bin 9f6e3e65aedca997c6445329663bd1d279392a34cfda7d1b56461eb41641fa08 actiV.bin  5) Based on the IDS alerts, what type of infection is this?
Looking at the text file with all the alerts, we easily find several lines showing: ET TROJAN ABUSE.CH SSL Blacklist Malicious SSL certificate detected (Dridex)
192.241.220.183 - 172.17.8.109
IPVer=4 hlen=5 tos=0 dlen=1045 ID=0 flags=0 offset=0 ttl=0 chksum=25788
Protocol: 6 sport=3389 - dport=49214  We can easily conclude that it was a Trojan.Dridex infection which is a banking trojan and spyware trageting Windows systems. You can read more about it in this article.
That&amp;rsquo;s all for today! Go try some of his exercices and contact me on twitter if you need help!
]]></content:encoded>
    </item>
    <item>
      <title>Writeup: TRAFFIC ANALYSIS EXERCISE</title>
      <link>https://domain.example/post/malware-traffic-analysis/</link>
      <pubDate>Fri, 09 Aug 2019 23:00:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/malware-traffic-analysis/</guid>
      <description>Malware Traffic Analysis @malware_traffic&amp;rsquo;s blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security for any organisation.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ Malware Traffic Analysis @malware_traffic&amp;rsquo;s blog has a lot of knowledge so I highly recommend to bookmark it somewhere. The real treasure is of course the amazing exercises page. Depending on the exercise, you get a pcap and other files. The pcap file is a traffic capture which we can analyse in Wireshark and find out where things went wrong!
Being able to effectively analyse traffic is a very important skill for the security for any organisation. It helps the security team to find out where the problem happened and how to mitigate it. It is also super fun!

The first exercise Today, I&amp;rsquo;ll start with the exercise &amp;ldquo;2014-11-16 - TRAFFIC ANALYSIS EXERCISE&amp;rdquo;. The writeup will be about the level 1 and level 2 questions this time:
LEVEL 1 QUESTIONS:
1) What is the IP address of the Windows VM that gets infected?
2) What is the host name of the Windows VM that gets infected?
3) What is the MAC address of the infected VM?
4) What is the IP address of the compromised web site?
5) What is the domain name of the compromised web site?
6) What is the IP address and domain name that delivered the exploit kit and malware?
LEVEL 2 QUESTIONS:
1) What is the redirect URL that points to the exploit kit (EK) landing page?
2) Besides the landing page (which contains the CVE-2013-2551 IE exploit), what other exploit(s) sent by the EK?
3) How many times was the payload delivered?
4) Submit the pcap to VirusTotal and find out what snort alerts triggered. What are the EK names are shown in the Suricata alerts?

Level 1 questions 1) What is the IP address of the Windows VM that gets infected?
The source of all traffic is 172.16.165.165, so I can assume that this is the infected VM.
2) What is the host name of the Windows VM that gets infected?
There are many ways to check that as demonstrated in this article. I chose to filter the traffic on bootp to reveal the DHCP traffic. I selected one of the frames, and in the frame details, I went to Bootstrap Protocol and then in the options we find the hostname and MAC address: 3) What is the MAC address of the infected VM?
We got the MAC address in the 2nd question, but alternatively, we can see it in all the frames&amp;rsquo; details: 4) What is the IP address of the compromised web site?
If we filter the GET requests (http.request.method == GET), we can follow the referers. The user visited &amp;ldquo;ciniholland&amp;rdquo; and through the referers of each GET requests, we see that it leads to a very suspicious website which initiates downloads on the machine.
So I assume ciniholland.nl/ is the compromised website and its IP is 82.150.140.30
5) What is the domain name of the compromised web site?
Answered above: ciniholland.nl/
6) What is the IP address and domain name that delivered the exploit kit and malware?
If we follow the GET requests, we can clearly see that the final website initiates downloads on the now compromised machine: And its IP address is 37.200.69.143

Level 2 questions 1) What is the redirect URL that points to the exploit kit (EK) landing page?
As I checked the different GET requests in the first level, I found out that the referer to the first EK landing page (stand.trustandprobaterealty.com) was: 24corp-shop.com
I can also export the HTML object (File &amp;ndash;&amp;gt; Export Object &amp;ndash;&amp;gt; HTTP), then download the 24corp-shop.com html file. Open it in a text editor and I find: 2) Besides the landing page (which contains the CVE-2013-2551 IE exploit), what other exploit(s) sent by the EK?
By checking the the HTML object (File &amp;ndash;&amp;gt; Export Object &amp;ndash;&amp;gt; HTTP), I can see two other exploits: a Flash and a Java. Alternatively, I had found them during my first recon in the list of HTTP GET requests by following the HTTP stream: 3) How many times was the payload delivered?
I&amp;rsquo;m not 100% sure, but I can&amp;rsquo;t see any other name for the payload than x-msdownload, and a quick filtering give us 3 deliveries: 4) Submit the pcap to VirusTotal and find out what snort alerts triggered. What are the EK names are shown in the Suricata alerts?
I didn&amp;rsquo;t know about VirusTotal, so it was a nice question to introduce it. Here is what I found there: ET CURRENT_EVENTS GoonEK ET CURRENT_EVENTS Goon/Infinity URI Struct EK ET CURRENT_EVENTS RIG EK

This is all for today! I learned a lot through each question. It&amp;rsquo;s a quick writeup, but I spend a lot of time digging for the answers. I won&amp;rsquo;t do a writeup for all the exercises, but I will make one for the most interesting exercises.
Thank you for reading this and get in contact if you have any question, recommendation, spotted mistakes, etc.
]]></content:encoded>
    </item>
    <item>
      <title>i18 Challenge - Part 1</title>
      <link>https://domain.example/post/i18-1/</link>
      <pubDate>Wed, 10 Jul 2019 10:40:00 UT</pubDate>
      <dc:creator>theyknow</dc:creator>
      <guid>https://domain.example/post/i18-1/</guid>
      <description>The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter.</description>
      <category domain="https://domain.example/categories/post">Post</category>
      <content:encoded><![CDATA[ The i18 has 13 challenges that you can find at this address. This CTF is in Norwegian, but has a very small amount of text so google translate is more than enough, but I will translate the text and clues to english here. This is the first part of my writeup where I will do the first 4 challenges. It is very possible that I will make mistakes or take longer path to the flag, so if you have any recommandation or correction, feel free to contact me by email or twitter. And same if you have questions or things you would like to know more about! Alright let&amp;rsquo;s jump in!
1: Ren rutine Task: First task and this is simple. The answer we are looking for is sha256(lett som en plett).
This one seems fairly easy: just generates the sha256 hash for the sentence ‘lett som en plett’. Just type this command: echo -n &#39;lett som en plett&#39; | sha256sum  It will give: b3df0e709c60b6c3790941a49d989dcd1911b1e25eba18afdb08f78820a1b8cf
And it works! First flag!
2: This Must Be The Place Task: We have put this on our head completely.
No more info than that. But it says the &amp;ldquo;head&amp;rdquo; so I would imagine it has something to do with the header, so let&amp;rsquo;s look at the page header! A quick way to do that is to right click, inspect element, go to to the network tab and click on the first GET request which is for this specific page. In the header, we do find a strange parameter called X-Answer with the value: b8e63fba4504b3c29e582cc3d1f6cc56918998d50e55b1af3382080506f2f969
And indeed it works! We could also have just pinged the page to get the header back: curl -I https://challenge.i18.no/level/fbmserjd3dwtvrspnk8ektmxsvdenwvp  3: I Skyggene Task: nsm:$1$asH66rpo$gkIQMSAA.QS/ah5VZvrYi0:16403:0:99999:7::: Clue one: Passwords that follow predictable patterns make them easier to crack.
Clue two: An article explaining why Summerferie2014 is a bad password.
The clues are completely essential for me here because I have very little experience in crypto challenges. I can easily guess that it will follow the pattern of Summerferie2014 though. So one word and then one number (probably a year). As it is in Norwegian, we can&amp;rsquo;t use already premade wordlists I have in English.
To find a list of words wasn&amp;rsquo;t easy but I found an old scrabble website that had one in their rules page by googling ordboka: https://www.ordspill.no/rules/ which redirects us in the end to this website with a downloadable list: http://www2.scrabbleforbundet.no/wp-content/uploads/2016/10/nsf2016.zip
I wonder if they know their innocent scrabble list can be used to crack passwords. Anyway this probably took me almost an hour but we got it! Oh yes, the actual challenge now.
We save the hash in a text file and after running a normal command with john (john hash.txt &amp;ndash;wordlist=nsf2016.txt), it doesn&amp;rsquo;t manage to crack the password. So we probably need to help it by adding a rule as we know the format of the possible password (common word &#43; number/year).
According to this article: https://www.gracefulsecurity.com/custom-rules-for-john-the-ripper/ - we should be able to create that by adding to the john&amp;rsquo;s Config file (etc/john/john.conf) this rule: [List.Rules:wordDate]
cAz&#34;201[0-9]&#34;  Basically it will try every word on the list with a first capital letter, then 201 and add 0 to 9 at the end, giving for example Stanley2012. The “c” at the beginning tells john to remove the rule of the initial capital letter if it doesn&amp;rsquo;t find anything. So after the right command: john hash.txt --wordlist=nsf2016.txt --rules=wordDate  It tells me that it cracked it with the result being “Demokrati2015”. For some reason, the CTF did not accept this answer and I couldn&amp;rsquo;t understand why. But then I remembered that the previous answers were hashed in sha256 so I did the same with Demokrati2015 and it worked. echo -n Demokrati2015 | sha256sum a4e3e09a00b0706add935ebdf627dc57bfb6e9d53b0be2c60754ad5865ce3c4f  4: Broen A file. What is hiding in this.
Clue: sha256(lc(nameofaplace))
Ok so we get a file to download. Awesome! I love to do forensic challenges. The file is called data.bin. Let&amp;rsquo;s check what it could be with a simple command: file data.bin “data.bin: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 65535)”  Great! A pcap file. I&amp;rsquo;m deep into a network security ebook so I recognise the extension directly. Basically for those that don&amp;rsquo;t know, pcap means Packet Capture Data. The file was generated through packet sniffing by the free software Wireshark. So let&amp;rsquo;s open the software and have a look at this capture. It&amp;rsquo;s a short packet capture and we see directly that there was a successful HTTP request and another request after that for an image:
If we continue down through this image request, we see that it was also successful:
Which means there is an image in this packet capture. To get the files transfered through HTTP, go to file -&amp;gt; Export Objects -&amp;gt; HTTP. Let&amp;rsquo;s have a look at this picture:
Interesting&amp;hellip; It looks like a google map picture of a bridge (Broen, the title of the challenge means bridge in Norwegian). As the clue is about finding the name of a place, I can guess already that if we find where this bridge is, we should be good to go. Let&amp;rsquo;s start by checking the website that is written as Copyright. But we don&amp;rsquo;t find anything there, just an interactive map and I&amp;rsquo;m not going to visit all the places in Norway looking for this bridge. Let&amp;rsquo;s analyze the image then.
I did not find anything interesting by checking the usual commands like identify, file, exiv2. So after some googling I found an article by Nullbyte about extracting hidden information in images through exiftool. I quickly installed it and after running it, we get an interesting information:
A GPS position! Alright now we&amp;rsquo;re getting somewhere. I go straight to a GPS coordinate website, enter the coordinates and BOOM! We know that the bridge is in Eidsvoll. Fun fact: the Norwegian constitution was drafted and signed in Eisdvoll on the 17th of May 1814 by the constitutional assembly. And this is now the Norwegian national day.
Let&amp;rsquo;s finish the challenge now:
echo -n eidsvoll | sha256sum e6b46a50991986097e4a309076cc0760be4c7a643f62e42b07adaf14a7fe30d4  Success! See you in part 2!
]]></content:encoded>
    </item>
  </channel>
</rss>
